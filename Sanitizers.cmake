option(ENABLE_ASAN "Enable address sanitizer with ENABLE_ASAN=1" false)
option(ENABLE_UBSAN "Enable undefined behaviour sanitizer with ENABLE_UBSAN=1." false)
option(ENABLE_LSAN "Enable leak sanitizer with ENABLE_LSAN=1." false)

if (ENABLE_ASAN)
    if (CMAKE_CXX_COMPILER_ID MATCHES GNU OR CMAKE_CXX_COMPILER_ID MATCHES Clang)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=address")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=address")
    else()
        message(FATAL_ERROR "Only GCC and Clang are currently supported.")
    endif()
endif()

if (ENABLE_UBSAN)
    if (CMAKE_CXX_COMPILER_ID MATCHES GNU OR CMAKE_CXX_COMPILER_ID MATCHES Clang)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=undefined")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=undefined")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=undefined")
    else()
        message(FATAL_ERROR "Only GCC and Clang are currently supported.")
    endif()
endif()

if (ENABLE_LSAN)
    if (CMAKE_CXX_COMPILER_ID MATCHES GNU OR CMAKE_CXX_COMPILER_ID MATCHES Clang)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=leak")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=leak")
        set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -fsanitize=leak")
    else()
        message(FATAL_ERROR "Only GCC and Clang are currently supported.")
    endif()
endif()